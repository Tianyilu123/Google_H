class Solution {
    int[][][] mem = new int[27][27][300];
    public int minimumDistance(String word) {
        return minDist(word, 0, null, null);
    }
    
    private int minDist(String word, int pos, Character finger1, Character finger2) {
        if(pos == word.length())
            return 0;
        int idx1 = finger1 == null ? 0 : finger1-'A'+1;
        int idx2 = finger2 == null ? 0 : finger2-'A'+1;
        
        if(mem[idx1][idx2][pos] == 0) {
            mem[idx1][idx2][pos] = Math.min(getDist(finger1, word.charAt(pos)) + 
            minDist(word, pos+1, word.charAt(pos), finger2), getDist(finger2, word.charAt(pos)) + 
            minDist(word, pos+1, finger1, word.charAt(pos)));
        }
        return mem[idx1][idx2][pos];
    }
    
    private int getDist(Character cur, Character next)  {
        if(cur == null || next == null) return 0;
        int dcur = cur-'A';
        int dnext = next-'A';
        int curx = dcur/6, cury = dcur%6;
        int nextx = dnext/6, nexty = dnext%6;
        return Math.abs(curx - nextx) + Math.abs(cury - nexty);
    }
}

// Time: O(n * 27 ^ m), where m is the number of fingers. Note that this is a very loose upper bound as we won't go through all combinations, as you will see in the next solution.
// Memory: O(n * 27 ^ m) for memoisation.
