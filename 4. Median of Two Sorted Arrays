class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int len1 = nums1.length, len2 = nums2.length;
        if(len1 > len2)
            return findMedianSortedArrays(nums2, nums1);
        if(len1 == 0)
            return ((double)nums2[(len2-1)/2] + (double)nums2[len2/2])/2;
        int len = len1 + len2;
        int start = 0, end = len1;
        int cut1, cut2;
        
        while(start <= end) {
            cut1 = (start+end)/2;
            cut2 = (len+1)/2 - cut1;
            double L1 = (cut1 == 0)? Integer.MIN_VALUE : nums1[cut1-1];
            double L2 = (cut2 == 0)? Integer.MIN_VALUE : nums2[cut2-1];
            double R1 = (cut1 == len1)? Integer.MAX_VALUE : nums1[cut1];
            double R2 = (cut2 == len2)? Integer.MAX_VALUE : nums2[cut2];
            if(L1 > R2)
                end = cut1 - 1;
            else if(L2 > R1)
                start = cut1 + 1;
            else {
                if((len%2 == 0))
                    return (Math.max(L1,L2) + Math.min(R1,R2))/2;
                else
                    return Math.max(L1, L2);
            }
        }
        return -1;
    }
}


// method 2: merge sort
(O(m+n), O(m+n))

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int[] res = merge(nums1, nums2);
        int len = res.length;
        if(len%2 == 0) {
            return (res[(len-1)/2] + res[len/2])/2.0;
        } else {
            return res[len/2];
        }
    }
    
    private int[] merge(int[] nums1, int[] nums2) {
        int[] merged = new int[nums1.length + nums2.length];
        int i=0, j=0, k=0;
        
        while(i<nums1.length && j<nums2.length) {
            merged[k++] = (nums1[i]<nums2[j]) ? nums1[i++] : nums2[j++];
        }
        
        while(i<nums1.length) {
            merged[k++] = nums1[i++];
        }
        
        while(j<nums2.length) {
            merged[k++] = nums2[j++];
        }
        return merged;
    }
}
