// method 1:
class Codec {

    // Encodes a tree to a single string.
    public String serialize(Node root) {
        List<String> list=new LinkedList<>();
        serializeHelper(root,list);
        return String.join(",",list);
    }
    
    private void serializeHelper(Node root, List<String> list){
        if(root==null){
            return;
        }else{
            list.add(String.valueOf(root.val));
            list.add(String.valueOf(root.children.size()));
            for(Node child:root.children){
                serializeHelper(child,list);
            }
        }
    }

    // Decodes your encoded data to tree.
    public Node deserialize(String data) {
        if(data.isEmpty())
            return null;
        
        String[] ss=data.split(",");
        Queue<String> q=new LinkedList<>(Arrays.asList(ss));
        return deserializeHelper(q);
    }
    
    private Node deserializeHelper(Queue<String> q){
        Node root=new Node();
        root.val=Integer.parseInt(q.poll());
        int size=Integer.parseInt(q.poll());
        root.children=new ArrayList<Node>(size);
        for(int i=0;i<size;i++){
            root.children.add(deserializeHelper(q));
        }
        return root;
    }
}


// method 2:
class Codec {

    // Encodes a tree to a single string.
    public String serialize(Node root) {
        StringBuilder sb = new StringBuilder();
        _serialize(root, sb);
        return sb.toString();
    }

    // Decodes your encoded data to tree.
    public Node deserialize(String data) {
        if (data == null) return null;
        return _deserialize(data.toCharArray(), new int[] {0});
    }
    
    private void _serialize(Node root, StringBuilder sb) {
        if (root == null) return;
        sb.append("[").append(root.val);
        if (root.children != null) {
            for (Node child: root.children) {
                _serialize(child, sb);
            }
        }
        sb.append("]");
    }
    
    private Node _deserialize(char[] s, int[] p) {
        if (p[0] >= s.length) return null;
        int j = p[0] + 1;
        int val = 0;
        while (j < s.length && s[j] >= '0' && s[j] <= '9') {
            val = val * 10 + (s[j] - '0');
            j++;
        }
        Node root = new Node(val, new ArrayList<>());
        p[0] = j;
        while (s[p[0]] == '[') {
            root.children.add(_deserialize(s, p));
        }
        p[0] += 1;
        return root;
    }
}
