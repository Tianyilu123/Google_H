class Codec {

    // Encodes a tree to a single string.
    public String serialize(Node root) {
        StringBuilder sb = new StringBuilder();
        _serialize(root, sb);
        return sb.toString();
    }

    // Decodes your encoded data to tree.
    public Node deserialize(String data) {
        if (data == null) return null;
        return _deserialize(data.toCharArray(), new int[] {0});
    }
    
    private void _serialize(Node root, StringBuilder sb) {
        if (root == null) return;
        sb.append("[").append(root.val);
        if (root.children != null) {
            for (Node child: root.children) {
                _serialize(child, sb);
            }
        }
        sb.append("]");
    }
    
    private Node _deserialize(char[] s, int[] p) {
        if (p[0] >= s.length) return null;
        int j = p[0] + 1;
        int val = 0;
        while (j < s.length && s[j] >= '0' && s[j] <= '9') {
            val = val * 10 + (s[j] - '0');
            j++;
        }
        Node root = new Node(val, new ArrayList<>());
        p[0] = j;
        while (s[p[0]] == '[') {
            root.children.add(_deserialize(s, p));
        }
        p[0] += 1;
        return root;
    }
}
