// method 1:
class Solution {
    public int maxProfit(int k, int[] prices) {
        if(k < 1) return 0;
        int len = prices.length;
        if(k >= len) {
            int sum = 0;
            for(int i=1; i<len; i++) {
                if(prices[i] > prices[i-1])
                    sum += prices[i] - prices[i-1];
            }
            return sum;
        }
        
        int[] buy = new int[k+1];
        int[] sell = new int[k+1];
        for(int i=0; i<=k; i++)
            buy[i] = Integer.MIN_VALUE;
        
        for(int price : prices) {
            for(int i=1; i<=k; i++) {
                buy[i] = Math.max(sell[i-1]-price, buy[i]);
                sell[i] = Math.max(buy[i]+price, sell[i]);
            }
        }
        
        return sell[k];
    }
}


// method 2:
class Solution {
    public int maxProfit(int k, int[] prices) {
        int len = prices.length;
        if(k >= len/2) {
            int sum = 0;
            for(int i=1; i<len; i++) {
                if(prices[i] - prices[i-1] > 0) {
                    sum += prices[i] - prices[i-1];
                }
            }
                return sum;
        }
        
        int[][] sell = new int[k+1][len];
        int[][] buy = new int[k+1][len];
        
        for(int i=1; i<=k; i++) {
            buy[i][0] = -prices[0];
            for(int j=1; j<len; j++) {
                sell[i][j] = Math.max(sell[i][j-1], buy[i][j-1] + prices[j]);
                buy[i][j] = Math.max(buy[i][j-1], sell[i-1][j-1] - prices[j]);
            }
        }
        return sell[k][len-1];
    }
}


// method 3:
class Solution {
    public int maxProfit(int k, int[] prices) {
        int len = prices.length;
        if(k >= len/2) {
            int sum = 0;
            for(int i=1; i<len; i++) {
                if(prices[i] - prices[i-1] > 0) {
                    sum += prices[i] - prices[i-1];
                }
            }
                return sum;
        }
        
        int[][] sell = new int[k+1][len+1];
        int[][] buy = new int[k+1][len+1];
        
        for(int i=1; i<=k; i++) {
            buy[i][1] = -prices[0];
            for(int j=1; j<len; j++) {
                sell[i][j+1] = Math.max(sell[i][j], buy[i][j] + prices[j]);
                buy[i][j+1] = Math.max(buy[i][j], sell[i-1][j] - prices[j]);
            }
        }
        return sell[k][len];
    }
}
