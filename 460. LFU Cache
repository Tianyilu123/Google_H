class LFUCache {
    class Node {
        int key, val, freq;
        Node prev, next;
        Node(int key, int val) {
            this.key = key;
            this.val = val;
            this.freq = 1;
        }
    }
    
    class DLL {
        Node head, tail;
        int cnt;
        DLL() {
            head = new Node(0, 0);
            tail = new Node(0, 0);
            head.next = tail;
            tail.prev = head;
            this.cnt = 0;
        }
        
        void add(Node node){
            head.next.prev = node;
            node.next = head.next;
            node.prev = head;
            head.next = node;
            cnt++;
        }
        
        void remove(Node node) {
            node.prev.next = node.next;
            node.next.prev = node.prev;
            cnt--;
        }
        
        Node removeLast() {
            if(cnt > 0) {
                Node node = tail.prev;
                remove(node);
                return node;
            }
            else return null;
        }
    }
    
    private void update(Node node) {
        DLL oldList = freqMap.get(node.freq);
        oldList.remove(node);
        if(node.freq == minFreq && oldList.cnt == 0) minFreq++;
        node.freq++;
        DLL newList = freqMap.getOrDefault(node.freq, new DLL());
        newList.add(node);
        freqMap.put(node.freq, newList);
    }
    
    
    int capacity, size, minFreq;
    Map<Integer, Node> nodeMap;
    Map<Integer, DLL> freqMap;
    
    public LFUCache(int capacity) {
        this.capacity = capacity;
        this.nodeMap = new HashMap<>();
        this.freqMap = new HashMap<>();
    }
    
    public int get(int key) {
        Node node = nodeMap.get(key);
        if(node == null) return -1;
        update(node);
        return node.val;
    }
    
    public void put(int key, int value) {
        if(capacity == 0) return;
        Node node;
        if(nodeMap.containsKey(key)){
            node = nodeMap.get(key);
            node.val = value;
            update(node);
        }
        else {
            node = new Node(key, value);
            nodeMap.put(key, node);
            if(size == capacity){
                DLL lastList = freqMap.get(minFreq);
                nodeMap.remove(lastList.removeLast().key);
                size--;
            }
            size++;
            minFreq = 1;
            DLL newList = freqMap.getOrDefault(node.freq, new DLL());
            newList.add(node);
            freqMap.put(minFreq, newList);
        }
    }
}

