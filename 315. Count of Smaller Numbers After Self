class Solution {
    class Node {
        Node left, right;
        int val, leftSum, dup=1;
        public Node(int v, int s) {
            this.val = v;
            this.leftSum = s;
        }
    }
    
    public List<Integer> countSmaller(int[] nums) {
        Integer[] ans = new Integer[nums.length];
        Node root = null;
        for(int i=nums.length-1; i>=0; i--) {
            root = insert(nums[i], root, ans, i, 0);
        }
        return Arrays.asList(ans);
    }
    
    private Node insert(int num, Node node, Integer[] ans, int i, int upSum) {
        if(node == null) {
            node = new Node(num, 0);
            ans[i] = upSum;
        } else if(node.val == num) {
            node.dup++;
            ans[i] = upSum + node.leftSum;
        } else if(node.val > num) {
            node.leftSum++;
            node.left = insert(num, node.left, ans, i, upSum);
        } else if(node.val < num) {
            node.right = insert(num, node.right, ans, i, upSum+node.dup+node.leftSum);
        }
        return node;
    }
}
