// method1:
class Solution {
    public int[] smallestRange(List<List<Integer>> nums) {
        PriorityQueue<int[]> pq = new PriorityQueue<int[]>((a, b) -> a[0] - b[0]);
        int max = Integer.MIN_VALUE;
        
        for(int i = 0; i < nums.size(); i++) {
        	max = Math.max(max, nums.get(i).get(0));
        	pq.add(new int[] {nums.get(i).get(0), i, 0});
        }
        
        int[] result = {pq.peek()[0], max};
        while(result[1] - result[0] != 0 && pq.peek()[2] + 1 < nums.get(pq.peek()[1]).size()) {
        	int[] curr = pq.poll();
        	pq.add(new int[] {nums.get(curr[1]).get(curr[2] + 1), curr[1], curr[2] + 1});
        	max = Math.max(max, nums.get(curr[1]).get(curr[2] + 1));
        	if(max - pq.peek()[0] < result[1] - result[0]) 
                result = new int[] {pq.peek()[0], max};
        }
        return result;
    }
}

// time: O(n*m*log(m))
// space: O(m)

// method 2:
public int[] smallestRange(List<List<Integer>> a) {
        PriorityQueue<int[]> q = new PriorityQueue<>(Comparator.comparingInt(o -> a.get(o[0]).get(o[1])));
        int max = Integer.MIN_VALUE, start = 0, end = Integer.MAX_VALUE;
        for (int i = 0; i < a.size(); i++) {
            q.offer(new int[]{i, 0});
            max = Math.max(max, a.get(i).get(0));
        }
        while (q.size() == a.size()) {
            int e[] = q.poll(), row = e[0], col = e[1];
            if (end - start > max - a.get(row).get(col)) {
                start = a.get(row).get(col);
                end = max;
            }
            if (col + 1 < a.get(row).size()) {
                q.offer(new int[]{row, col + 1});
                max = Math.max(max, a.get(row).get(col + 1));
            }
        }
        return new int[]{start, end};
    }
