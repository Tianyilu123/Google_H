// method 1:
class Solution {
    public void findSecretWord(String[] wordlist, Master master) {
        Arrays.sort(wordlist);
        Map<String, Integer> badWords = new HashMap();
        for(String word:wordlist) {
            if (validateWord(word, badWords)){
                int score = master.guess(word);
                if (score==6) {
                    return;
                }
                badWords.put(word, score);
            }
        }
    }
    
    private boolean validateWord(String candidate, Map<String, Integer> badWords) {
        int similarity = 0;
        Integer score = 0;
        for(String w:badWords.keySet()) {
            similarity = similarity(w, candidate);
            score = badWords.get(w);
            if ( (score==0 && similarity > 0) || similarity < score ){
                return false;
            }
        }
        return true;
    }
    
    public int similarity(String s1, String s2) {
        int count = 0;
      for(int i=0; i<s1.length(); i++) {
          if (s1.charAt(i)==s2.charAt(i)) {
              count++;
          }
      }
        return count;
    }
 
}



// method 2:
class Solution {
    public void findSecretWord(String[] wordlist, Master master) {
        for (int i = 0, x = 0; i < 10 && x < 6; i++) {
            String guess = wordlist[new Random().nextInt(wordlist.length)];
            x = master.guess(guess);
            List<String> wordlist2 = new ArrayList<>();
            for (String w : wordlist)
                if (match(guess, w) == x)
                    wordlist2.add(w);
            wordlist = wordlist2.toArray(new String[wordlist2.size()]);
        }
    }
    
    public int match(String a, String b) {
        int matches = 0;
        for (int i = 0; i < a.length(); ++i) if (a.charAt(i) == b.charAt(i)) matches ++;
        return matches;
    }
}
