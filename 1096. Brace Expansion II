class Solution {
    public List<String> braceExpansionII(String expression) {
        String s = expression;
        Stack<List<String>> stack = new Stack<>();
        char preSign = ',';
        
        for(int i=0; i<s.length(); i++) {
            char ch = s.charAt(i);
            // case 1:
            if(ch == '{') {
                int j=i, p=1;
                while(p != 0) {
                    j++;
                    if(s.charAt(j) == '{') p++;
                    if(s.charAt(j) == '}')  p--;
                }
                List<String> slist = braceExpansionII(s.substring(i+1, j));
                if(preSign == '*')
                    stack.push(merge(stack.pop(), slist));
                else
                    stack.push(slist);
                i=j;
                preSign = '*';
            }
            
            // case 2:
            else if(Character.isLetter(ch)) {
                List<String> slist = new ArrayList<>();
                slist.add(""+ch);
                if(preSign == '*')
                    stack.push(merge(stack.pop(), slist));
                else 
                    stack.push(slist);
                preSign = '*';
            }
            
            else if(ch == ',' || i == s.length()-1) {
                preSign = ',';
            }
        }
        
        List<String> res = new ArrayList<>();
        while(!stack.isEmpty()) {
            for(String str : stack.pop()){
                if(!res.contains(str))
                    res.add(str);
            }
        }
        Collections.sort(res);
        return res;
    }
    
    private List<String> merge(List<String> list1, List<String> list2) {
        List<String> res = new ArrayList<>();
        for(String str1 : list1) {
            for(String str2 : list2) {
                res.add(str1 + str2);
            }
        }
        return res;
    }
}
