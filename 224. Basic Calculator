class Solution {
    public int calculate(String s) {
        if(s == null || s.length() == 0) return 0;
        Stack<Integer> stack = new Stack<>();
        char sign = '+';
        int prev = 0, res = 0;
        
        for(int i=0; i<s.length(); i++) {
            char ch = s.charAt(i);
            if(Character.isDigit(ch)) {
                prev = 10*prev + (ch-'0');
            }
            if(ch == '(') {
                int j = findClose(s.substring(i));
                prev = calculate(s.substring(i+1, i+j));
                i += j;
            }
            if(ch=='+' || ch=='-' || ch==')' || i==s.length()-1) {
                switch(sign) {
                    case '+': stack.push(prev); break;
                    case '-': stack.push(-prev); break;
                }
                prev = 0;
                sign = ch;
            }
        }
        
        while (!stack.isEmpty()) {
            res += stack.pop();
        }
        
        return res;
    }
    
    private int findClose(String str) {
        int delta = 0;
        int i=0;
        for(i=0; i<str.length(); i++) {
            if(str.charAt(i) == '(') delta++;
            else if(str.charAt(i) == ')') {
                delta--;
                if(delta == 0) break;
            }
            else continue;
        }
        return i;
    }
}
