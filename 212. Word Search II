class Solution {
    List<String> res = new ArrayList<>();
    TrieNode root = new TrieNode('\0');
    int[][] dirs = new int[][]{{-1,0},{1,0},{0,1},{0,-1}};
    
    public List<String> findWords(char[][] board, String[] words) {
        // build Trie
        for(String word : words) {
            TrieNode cur = root;
            for(int i=0; i<word.length(); i++) {
                int idx = word.charAt(i)-'a';
                if(cur.nexts[idx] == null)
                    cur.nexts[idx] = new TrieNode(word.charAt(i));
                cur = cur.nexts[idx];
            }
            cur.isWord = true;
        }
        
        // search:
        int row = board.length, col = board[0].length;
        boolean visited[][] = new boolean[row][col];
        for(int i=0; i<row; i++) {
            for(int j=0; j<col; j++){
                search(board, visited, i, j, new StringBuilder(), root);
            }
        }
        return res;
    }
    
    private void search(char[][] board, boolean[][] visited, int i, int j, StringBuilder sb, 
                                                                            TrieNode node) {
        int row = board.length, col = board[0].length;
        if(i<0 || i>= row || j<0 || j>=col || visited[i][j] || node.nexts[board[i][j]-'a'] == null)
            return;
        TrieNode next = node.nexts[board[i][j]-'a'];
        visited[i][j] = true;
        sb.append(board[i][j]);
        
        if(next.isWord) {
            res.add(sb.toString());
            next.isWord = false;
        }
        
        for(int[] dir : dirs) {
            int ii = i + dir[0];
            int jj = j + dir[1];
            search(board, visited, ii, jj, sb, next);
        }
        
        sb.deleteCharAt(sb.length()-1);
        visited[i][j] = false;
    }
}

class TrieNode {
    char ch;
    TrieNode[] nexts;
    boolean isWord;
    boolean isFound;
    
    TrieNode(char ch){
        this.ch = ch;
        nexts = new TrieNode[26];
        isWord = false;
        isFound = false;
    }
}
