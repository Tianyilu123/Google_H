class Solution {
    public int racecar(int target) {
        int[] dp = new int[target+1];
        
        for(int i=1; i<=target; i++) {
            dp[i] = Integer.MAX_VALUE;
            int pa = 1, pd = 1;
            
            for(; pd < i; pd = (1<<++pa)-1) {
                for(int na = 0, nd = 0; nd < pd; nd = (1<<++na)-1) {
                    dp[i] = Math.min(dp[i], pa+1+na+1+dp[i-(pd-nd)]);
                }
            }
            
            dp[i] = Math.min(dp[i], pa+(i == pd ? 0 : 1+dp[pd-i]));
        }
        
        return dp[target];
    }
}

// method 2:
class Solution {
    public int racecar(int target) {
    Deque<int[]> queue = new LinkedList<>();
    queue.offerLast(new int[] {0, 1}); // starts from position 0 with speed 1
    
    Set<String> visited = new HashSet<>();
    visited.add(0 + " " + 1);
    
    for (int level = 0; !queue.isEmpty(); level++) {
        for(int k = queue.size(); k > 0; k--) {
            int[] cur = queue.pollFirst();  // cur[0] is position; cur[1] is speed
            
            if (cur[0] == target) {
                return level;
            }
            
            int[] nxt = new int[] {cur[0] + cur[1], cur[1] << 1};  // accelerate instruction
            String key = (nxt[0] + " " + nxt[1]);
            
            if (!visited.contains(key) && 0 < nxt[0] && nxt[0] < (target << 1)) {
                queue.offerLast(nxt);
                visited.add(key);
            }
            
            nxt = new int[] {cur[0], cur[1] > 0 ? -1 : 1};  // reverse instruction
            key = (nxt[0] + " " + nxt[1]);
            
            if (!visited.contains(key) && 0 < nxt[0] && nxt[0] < (target << 1)) {
                queue.offerLast(nxt);
                visited.add(key);
            }
        }
    }
    
    return -1;
}
}
