// method 1:
class Solution {
    Map<Integer, Integer> map = new HashMap<>();
    int res = 0;
    public int confusingNumberII(int N) {
        map.put(0, 0);
        map.put(1, 1);
        map.put(6, 9);
        map.put(8, 8);
        map.put(9, 6);
        helper(N, 0);
        return res;
    }
    private void helper(int N, long cur) {
        if (isConfusingNumber(cur)) {
            res++;
        }
        for (Integer key : map.keySet()) {
            if (cur * 10 + key <= N && cur * 10 + key != 0) {
                helper(N, cur * 10 + key);
            }
        }
    }
    private boolean isConfusingNumber(long n) {
        long orig = n;
        long num = 0;
        while (n > 0) {
            num = num * 10 + map.get((int) n % 10); 
            n /= 10;
        }
        return num != orig;
    }
}



// method 2:
class Solution {
    int[] base = {0,1,6,8,9};
    int[] roBoard = {0,1,-1,-1,-1,-1,9,-1,8,6};
    
    public int confusingNumberII(int N) {
        int t = N;
        int len = 0;
        while(t>0) {
            t/=10;
            len++;
        }
        int ans = 0;
        if(len==10) {
            N-=1; ans=1; len-=1;
        }
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(0);
        int ori = 0;
        
        for(int i=0; i<len; i++) {
            int size = queue.size();
            while(size > 0) {
                int baseI = queue.poll();
                for(int j=0; j<5; j++) {
                    int cur = base[j];
                    if(i==0 && cur==0) continue;
                    // build:
                    ori = baseI*10 + cur;
                    if(ori <= N) {
                        queue.offer(ori); // store
                        int rot = rotate(ori); //  rotation
                        if(rot != ori)
                            ans++;
                    }
                }
                size--;
            }
        }
        return ans;
    }
    
    private int rotate(int b) {
        int a = 0;
        while(b>0) {
            int bit = b%10;
            b/=10;
            a = a*10 + roBoard[bit];
        }
        return a;
    }
}

