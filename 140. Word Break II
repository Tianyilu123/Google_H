class Solution {
    public List<String> wordBreak(String s, List<String> wordDict) {
        List<String> res = new ArrayList<>();
        int len = s.length();
        boolean mem[] = new boolean[len+1];
        Arrays.fill(mem, true);
        HashSet<String> dict = new HashSet<>();
        
        for(String word : wordDict) {
            dict.add(word);
        }
        
        search(res, new StringBuilder(), s, 0, dict, mem);
        return res;
    }
    
    private void search(List<String> res, StringBuilder path, String s, int idx, Set<String> dict,
                                                            boolean[] mem) {
        int len = s.length();
        if(idx == len) {
            res.add(path.toString());
            return;
        }
        
        int curSize = res.size();
        for(int i = idx+1; i<=s.length(); i++) {
            String str = s.substring(idx, i);
            if(dict.contains(str) && mem[i]) {
                int lenPath = path.length();
                if(lenPath == 0)
                    path.append(str);
                else 
                    path.append(" " + str);
                search(res, path, s, i, dict, mem);
                path.setLength(lenPath);
            }
        }
        if(res.size() == curSize)
            mem[idx] = false;
    }
}
