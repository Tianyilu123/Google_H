class Solution {
    public String shortestSuperstring(String[] A) {
        List<String> list = new ArrayList<>(Arrays.asList(A));
        
        
        while(true) {
            if(list.size() == 1) break;
            int saveLen = -1;
            
            int n = list.size();
            int idx1 = 0, idx2 = 0;
            String newStr = "";
            
            for(int i=0; i<n-1; i++) {
                for(int j=i+1; j<n; j++) {
                    String s1 = list.get(i);
                    String s2 = list.get(j);
                    String merged = merge(s1,s2);
                    
                    int saved = s1.length() + s2.length() - merged.length();
                    if(saved > saveLen) {
                        saveLen = saved;
                        idx1 = i;
                        idx2 = j;
                        newStr = merged;
                    }
                }
            }
            
            String str1 = list.get(idx1);
            String str2 = list.get(idx2);
            list.remove(str1);
            list.remove(str2);
            list.add(newStr);
        }
        return list.get(0);
    }
    
    private String merge(String s1, String s2) {
        int overlap1=0, overlap2=0;
        int len1 = s1.length(), len2 = s2.length();
        for(int len=1; len1>= len && len<=len2; len++) {
            if(s1.substring(len1-len).equals(s2.substring(0, len))) {
                overlap1 = len;
            }
        }
        
        for(int len=1; len2>=len && len<=len1; len++) {
            if(s2.substring(len2-len).equals(s1.substring(0, len))) {
                overlap2 = len;
            }
        }
        
        if(overlap1 >= overlap2){
            return s1.substring(0, len1-overlap1)+s2;
        } else{
            return s2.substring(0, len2-overlap2)+s1;
        }
    }
}
