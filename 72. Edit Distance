// method 1:
public class Solution {
    public int minDistance(String word1, String word2) {
        int len1 = word1.length();
        int len2 = word2.length();
        
        int[][] cost = new int[len1 + 1][len2 + 1];
        for(int i = 0; i <= len1; i++)
            cost[i][0] = i;
        for(int i = 1; i <= len2; i++)
            cost[0][i] = i;
        
        for(int i = 0; i < len1; i++) {
            for(int j = 0; j < len2; j++) {
                if(word1.charAt(i) == word2.charAt(j))
                    cost[i + 1][j + 1] = cost[i][j];
                else {
                    int a = cost[i][j];
                    int b = cost[i][j + 1];
                    int c = cost[i + 1][j];
                    cost[i + 1][j + 1] = Math.min(a, Math.min(b,c))+1;
                }
            }
        }
        return cost[len1][len2];
    }
}


// method2:
class Solution {
    public int minDistance(String word1, String word2) {
        int len1 = word1.length(), len2 = word2.length();
        int[][] dp = new int[len1+1][len2+1];
        
        for(int i=0; i<=len1; i++) {
            dp[i][0] = i;
        }
        for(int j=0; j<=len2; j++) {
            dp[0][j] = j;
        }
        
        for(int i=1; i<=len1; i++) {
            char c1 = word1.charAt(i-1);
            for(int j=1; j<=len2; j++) {
                char c2 = word2.charAt(j-1);
                if(c1 == c2) {
                    dp[i][j] = dp[i-1][j-1];
                } else {
                    // delete c1 from word1:
                    int delete = dp[i-1][j] + 1;
                    // insert c2 to word1:
                    int insert = dp[i][j-1] + 1;
                    // replace c1 to c2:
                    int replace = dp[i-1][j-1] + 1;
                    
                    dp[i][j] = Math.min(insert, Math.min(delete, replace));
                }
            }
        }
        return dp[len1][len2];
    }
}
